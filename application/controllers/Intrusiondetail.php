<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Intrusiondetail extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Intrusiondetail_model');
		if($this->session->userdata('logged_in') !== TRUE){
			redirect('/usermaster/login');
		}
    } 
	
	function formatTimeString($timeStamp) {
		$str_time = date("Y-m-d H:i:sP", $timeStamp);
		$time = strtotime($str_time);
		$d = new DateTime($str_time);

		$weekDays = ['Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat', 'Sun'];
		$months = ['Jan', 'Feb', 'Mar', 'Apr', ' May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];

		if ($time > strtotime('-2 minutes')) {
		  return 'Just now';
		} elseif ($time > strtotime('-59 minutes')) {
		  $min_diff = floor((strtotime('now') - $time) / 60);
		  return $min_diff . ' min' . (($min_diff != 1) ? "s" : "") . ' ago';
		} elseif ($time > strtotime('-23 hours')) {
		  $hour_diff = floor((strtotime('now') - $time) / (60 * 60));
		  return $hour_diff . ' hour' . (($hour_diff != 1) ? "s" : "") . ' ago';
		} elseif ($time > strtotime('today')) {
		  return $d->format('G:i');
		} elseif ($time > strtotime('yesterday')) {
		  return 'Yesterday at ' . $d->format('G:i');
		} elseif ($time > strtotime('this week')) {
		  return $weekDays[$d->format('N') - 1] . ' at ' . $d->format('G:i');
		} else {
		  return $d->format('j') . ' ' . $months[$d->format('n') - 1] .
		  (($d->format('Y') != date("Y")) ? $d->format(' Y') : "") .
		  ' at ' . $d->format('G:i');
		}
	}
    /*
     * Listing of intrusiondetails
     */
    function index($intrusionstatus = 'O')
    {   
		
		# User clicked Reset button - unset all session filters 
		if(isset($_POST['submit']) && $_POST['submit']=='reset' ){
			#print_r($_POST);
			unset($_SESSION['strdate']);
			unset($_SESSION['enddate']);
			unset($_SESSION['location']);
			unset($_SESSION['status']);
			unset($_SESSION['submit']);
			//	$_POST['strdate'] 
		} 
		$where =array();
		if(isset($_POST['strdate']) && $_POST['strdate'] && $_POST['submit']!='reset'){
			$_SESSION['strdate'] = $_POST['strdate'];
		}
		if(isset($_POST['enddate']) && $_POST['enddate'] && $_POST['submit']!='reset'){
			$_SESSION['enddate'] = $_POST['enddate'];
		}
		if(isset($_POST['location']) && $_POST['location'] && $_POST['submit']!='reset'){
			$_SESSION['location'] = $_POST['location'];
		}
		if(isset($_POST['status']) && $_POST['status'] && $_POST['submit']!='reset'){
			$_SESSION['status'] = $_POST['status'];
		}
		
		$this->db->select("*");
		$this->db->from('intrusiondetails');  
		$this->db->where("intrusiondetails.incidentstatus = '".$intrusionstatus."'");
		if(isset($_SESSION['strdate']) || isset($_SESSION['enddate']) || isset($_SESSION['location'])){
			
			if(isset($_SESSION['strdate'])){
				$where['intrusiondetails.intrusion_time'] = $_SESSION['strdate'];
				$this->db->where("DATE(intrusiondetails.intrusion_time) >= '".$_SESSION['strdate']."'");
			}
			if(isset($_SESSION['enddate'])){
				$where['intrusiondetails.intrusion_time'] = $_SESSION['enddate'];
				$this->db->where("DATE(intrusiondetails.intrusion_time) <= '".$_SESSION['enddate']."'");
			}
			if(isset($_SESSION['location'])){
				$where['intrusiondetails.locationid'] = $_SESSION['location'];
				$this->db->where("intrusiondetails.locationid = '".$_SESSION['location']."'");
			}
			if(isset($_SESSION['status'])){
				$where['intrusiondetails.incidentstatus'] = $_SESSION['status'];
				$this->db->where("intrusiondetails.incidentstatus = '".$_SESSION['status']."'");
			}			
		}
		//$this->db->join('locations', 'intrusiondetails.locationid=locations.id', 'left outer');
		$params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
		$config = $this->config->item('pagination');
		
		$config['next_link'] = 'Next ';
		$config['next_tag_open'] = '<li class="paginate_button page-item next" id="table_next">';
		$config['next_tag_close'] = '</li>';

		$config['prev_link'] = '  Previous';
		$config['prev_tag_open'] = '<li class="paginate_button page-item previous" id="table_previous">';
		$config['prev_tag_close'] = '</li>';

		$config['cur_tag_open'] = '<li class="paginate_button page-item active"><a  class="page-link" href="#">';
		$config['cur_tag_close'] = '</a></li>';
		$config['first_link'] =false;
        $config['last_link'] =false;
        $config['base_url'] = site_url('intrusiondetail/index/'.$intrusionstatus.'?');
		
        $config['total_rows'] = $this->db->get()->num_rows();
	
		$config['num_links'] = 2;
        $this->pagination->initialize($config);
		
		$this->db->select("*");
		$this->db->from('intrusiondetails'); 
		$this->db->where("intrusiondetails.incidentstatus = '".$intrusionstatus."'");
		if(isset($_SESSION['strdate']) || isset($_SESSION['enddate']) || isset($_SESSION['location'])){
			if(isset($_SESSION['strdate'])){
				$where['intrusiondetails.intrusion_time'] = $_SESSION['strdate'];
				$this->db->where("DATE(intrusiondetails.intrusion_time) >= '".$_SESSION['strdate']."'");
			}
			if(isset($_SESSION['enddate'])){
				$where['intrusiondetails.intrusion_time'] = $_SESSION['enddate'];
				$this->db->where("DATE(intrusiondetails.intrusion_time) <= '".$_SESSION['enddate']."'");
			}
			if(isset($_SESSION['location'])){
				$where['intrusiondetails.locationid'] = $_SESSION['location'];
				$this->db->where("intrusiondetails.locationid = '".$_SESSION['location']."'");
			}			
			if(isset($_SESSION['status'])){
				$where['intrusiondetails.incidentstatus'] = $_SESSION['status'];
				$this->db->where("intrusiondetails.incidentstatus = '".$_SESSION['status']."'");
			}
		}
		
		if(isset($params) && !empty($params)){
            $this->db->limit($params['limit'], $params['offset']);
        } 
		 
		$this->db->join('location', 'location.locationid = intrusiondetails.locationid'); 
		
		$this->db->order_by('intrusiondetails.intrusion_id', 'DESC');
		
		$query = $this->db->get();
		$data['intrusiondetails'] = $query->result_array();
		#var_dump($this->db->last_query());
        $data["links"] = $this->pagination->create_links();
		
		$start= (int)$this->uri->segment(3) * $config['per_page']+1;
		$end = ($this->uri->segment(3) == floor($config['total_rows']/ $config['per_page']))? $config['total_rows'] : (int)$this->uri->segment(3) * $config['per_page'] + $config['per_page'];
		
		if($config['total_rows'] < ( $this->pagination->cur_page * $this->pagination->per_page)){
			$of = $config['total_rows'];
		}else{
			$of = ( $this->pagination->cur_page * $this->pagination->per_page);
		}
		$data['result_count']=  "Showing from ".((($this->pagination->cur_page -1 ) *$this->pagination->per_page)+1)." to ".$of." of ". $config['total_rows']." total results";
		
		$response1 = $this->Location_model->get_all_location();
		$data['locations'] = $response1;
		$data['intrusionstatus'] = $intrusionstatus;
		
        $data['_view'] = 'intrusiondetail/index';
        $this->load->view('layouts/main',$data);
    }
	
	
	
	 /*
     * Listing of intrusiondetails
     */
    function imagescaptured()
    {   
		
		if(isset($_POST['submit']) && $_POST['submit']=='reset' ){
			#print_r($_POST);
			unset($_SESSION['strdate']);
			unset($_SESSION['enddate']);
			unset($_SESSION['location']);
			unset($_SESSION['submit']);
			//	$_POST['strdate'] 
		} 
		$where =array();
		if(isset($_POST['strdate']) && $_POST['strdate'] && $_POST['submit']!='reset'){
			$_SESSION['strdate'] = $_POST['strdate'];
		}
		
		if(isset($_POST['enddate']) && $_POST['enddate'] && $_POST['submit']!='reset'){
			$_SESSION['enddate'] = $_POST['enddate'];
		}
		
		if(isset($_POST['location']) && $_POST['location'] && $_POST['submit']!='reset'){
			$_SESSION['location'] = $_POST['location'];
		}
		$this->db->select("*");
		$this->db->from('intrusiondetails');  
		
		if(isset($_SESSION['strdate']) || isset($_SESSION['enddate']) || isset($_SESSION['location'])){
			
			if(isset($_SESSION['strdate'])){
				$where['intrusiondetails.intrusion_time'] = $_SESSION['strdate'];
				$this->db->where("DATE(intrusiondetails.intrusion_time) >= '".$_SESSION['strdate']."'");
			}
			if(isset($_SESSION['enddate'])){
				$where['intrusiondetails.intrusion_time'] = $_SESSION['enddate'];
				$this->db->where("DATE(intrusiondetails.intrusion_time) <= '".$_SESSION['enddate']."'");
			}
			if(isset($_SESSION['location'])){
				$where['intrusiondetails.locationid'] = $_SESSION['location'];
				$this->db->where("intrusiondetails.locationid = '".$_SESSION['location']."'");
			}			
		}
		//$this->db->join('locations', 'intrusiondetails.locationid=locations.id', 'left outer');
		$params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
		$config = $this->config->item('pagination');
		
		$config['next_link'] = 'Next ';
		$config['next_tag_open'] = '<li class="paginate_button page-item next" id="table_next">';
		$config['next_tag_close'] = '</li>';

		$config['prev_link'] = '  Previous';
		$config['prev_tag_open'] = '<li class="paginate_button page-item previous" id="table_previous">';
		$config['prev_tag_close'] = '</li>';

		$config['cur_tag_open'] = '<li class="paginate_button page-item active"><a  class="page-link" href="#">';
		$config['cur_tag_close'] = '</a></li>';
		$config['first_link'] =false;
        $config['last_link'] =false;
        $config['base_url'] = site_url('intrusiondetail/index?');
		
        $config['total_rows'] = $this->db->get()->num_rows();
	
		$config['num_links'] = 2;
        $this->pagination->initialize($config);
		
		$this->db->select("*");
		$this->db->from('intrusiondetails'); 
		
		if(isset($_SESSION['strdate']) || isset($_SESSION['enddate']) || isset($_SESSION['location'])){
			if(isset($_SESSION['strdate'])){
				$where['intrusiondetails.intrusion_time'] = $_SESSION['strdate'];
				$this->db->where("DATE(intrusiondetails.intrusion_time) >= '".$_SESSION['strdate']."'");
			}
			if(isset($_SESSION['enddate'])){
				$where['intrusiondetails.intrusion_time'] = $_SESSION['enddate'];
				$this->db->where("DATE(intrusiondetails.intrusion_time) <= '".$_SESSION['enddate']."'");
			}
			if(isset($_SESSION['location'])){
				$where['intrusiondetails.locationid'] = $_SESSION['location'];
				$this->db->where("intrusiondetails.locationid = '".$_SESSION['location']."'");
			}			
		}
		
		if(isset($params) && !empty($params)){
            $this->db->limit($params['limit'], $params['offset']);
        } 
		 
		$this->db->join('location', 'location.locationid = intrusiondetails.locationid'); 
		
		$this->db->order_by('intrusiondetails.intrusion_id', 'DESC');
		
		$query = $this->db->get();
		$data['intrusiondetails'] = $query->result_array();
		#var_dump($this->db->last_query());
        $data["links"] = $this->pagination->create_links();
		
		$start= (int)$this->uri->segment(3) * $config['per_page']+1;
		$end = ($this->uri->segment(3) == floor($config['total_rows']/ $config['per_page']))? $config['total_rows'] : (int)$this->uri->segment(3) * $config['per_page'] + $config['per_page'];

		$data['result_count']=  "Showing from ".(($this->pagination->cur_page -1 ) *$this->pagination->per_page)." to ".( $this->pagination->cur_page * $this->pagination->per_page)." of ". $config['total_rows']." total results";
		
		$response1 = $this->Location_model->get_all_location();
		$data['locations'] = $response1;
		
        $data['_view'] = 'intrusiondetail/index';
        $this->load->view('layouts/main',$data);
    }
	
	 /*
     * Listing of intrusiondetails
     */
    function intrusiondetected()
    {   
		
		if(isset($_POST['submit']) && $_POST['submit']=='reset' ){
			#print_r($_POST);
			unset($_SESSION['strdate']);
			unset($_SESSION['enddate']);
			unset($_SESSION['location']);
			unset($_SESSION['submit']);
			//	$_POST['strdate'] 
		} 
		$where =array();
		if(isset($_POST['strdate']) && $_POST['strdate'] && $_POST['submit']!='reset'){
			$_SESSION['strdate'] = $_POST['strdate'];
		}
		
		if(isset($_POST['enddate']) && $_POST['enddate'] && $_POST['submit']!='reset'){
			$_SESSION['enddate'] = $_POST['enddate'];
		}
		
		if(isset($_POST['location']) && $_POST['location'] && $_POST['submit']!='reset'){
			$_SESSION['location'] = $_POST['location'];
		}
		$this->db->select("*");
		$this->db->from('intrusiondetails');  
		
		if(isset($_SESSION['strdate']) || isset($_SESSION['enddate']) || isset($_SESSION['location'])){
			
			if(isset($_SESSION['strdate'])){
				$where['intrusiondetails.intrusion_time'] = $_SESSION['strdate'];
				$this->db->where("DATE(intrusiondetails.intrusion_time) >= '".$_SESSION['strdate']."'");
			}
			if(isset($_SESSION['enddate'])){
				$where['intrusiondetails.intrusion_time'] = $_SESSION['enddate'];
				$this->db->where("DATE(intrusiondetails.intrusion_time) <= '".$_SESSION['enddate']."'");
			}
			if(isset($_SESSION['location'])){
				$where['intrusiondetails.locationid'] = $_SESSION['location'];
				$this->db->where("intrusiondetails.locationid = '".$_SESSION['location']."'");
			}			
		}
		//$this->db->join('locations', 'intrusiondetails.locationid=locations.id', 'left outer');
		$params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
		$config = $this->config->item('pagination');
		
		$config['next_link'] = 'Next ';
		$config['next_tag_open'] = '<li class="paginate_button page-item next" id="table_next">';
		$config['next_tag_close'] = '</li>';

		$config['prev_link'] = '  Previous';
		$config['prev_tag_open'] = '<li class="paginate_button page-item previous" id="table_previous">';
		$config['prev_tag_close'] = '</li>';

		$config['cur_tag_open'] = '<li class="paginate_button page-item active"><a  class="page-link" href="#">';
		$config['cur_tag_close'] = '</a></li>';
		$config['first_link'] =false;
        $config['last_link'] =false;
        $config['base_url'] = site_url('intrusiondetail/index?');
		
        $config['total_rows'] = $this->db->get()->num_rows();
	
		$config['num_links'] = 2;
        $this->pagination->initialize($config);
		
		$this->db->select("*");
		$this->db->from('intrusiondetails'); 
		
		if(isset($_SESSION['strdate']) || isset($_SESSION['enddate']) || isset($_SESSION['location'])){
			if(isset($_SESSION['strdate'])){
				$where['intrusiondetails.intrusion_time'] = $_SESSION['strdate'];
				$this->db->where("DATE(intrusiondetails.intrusion_time) >= '".$_SESSION['strdate']."'");
			}
			if(isset($_SESSION['enddate'])){
				$where['intrusiondetails.intrusion_time'] = $_SESSION['enddate'];
				$this->db->where("DATE(intrusiondetails.intrusion_time) <= '".$_SESSION['enddate']."'");
			}
			if(isset($_SESSION['location'])){
				$where['intrusiondetails.locationid'] = $_SESSION['location'];
				$this->db->where("intrusiondetails.locationid = '".$_SESSION['location']."'");
			}			
		}
		
		if(isset($params) && !empty($params)){
            $this->db->limit($params['limit'], $params['offset']);
        } 
		 
		$this->db->join('location', 'location.locationid = intrusiondetails.locationid'); 
		
		$this->db->order_by('intrusiondetails.intrusion_id', 'DESC');
		
		$query = $this->db->get();
		$data['intrusiondetails'] = $query->result_array();
		#var_dump($this->db->last_query());
        $data["links"] = $this->pagination->create_links();
		
		$start= (int)$this->uri->segment(3) * $config['per_page']+1;
		$end = ($this->uri->segment(3) == floor($config['total_rows']/ $config['per_page']))? $config['total_rows'] : (int)$this->uri->segment(3) * $config['per_page'] + $config['per_page'];

		$data['result_count']=  "Showing from ".(($this->pagination->cur_page -1 ) *$this->pagination->per_page)." to ".( $this->pagination->cur_page * $this->pagination->per_page)." of ". $config['total_rows']." total results";
		
		$response1 = $this->Location_model->get_all_location();
		$data['locations'] = $response1;
		
        $data['_view'] = 'intrusiondetail/index';
        $this->load->view('layouts/main',$data);
    }
    /*
     * Adding a new intrusiondetail
     */
    function add()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'school_id' => $this->input->post('school_id'),
				'camera_id' => $this->input->post('camera_id'),
				'intrusion_imagepath' => $this->input->post('intrusion_imagepath'),
				'intrusion_status' => $this->input->post('intrusion_status'),
				'intrusion_time' => $this->input->post('intrusion_time'),
				'intrusion_resolvedTime' => $this->input->post('intrusion_resolvedTime'),
				'createdBy' => $this->input->post('createdBy'),
				'createdOn' => $this->input->post('createdOn'),
				'modifiedBy' => $this->input->post('modifiedBy'),
				'modifiedOn' => $this->input->post('modifiedOn'),
				'intrusion_fileName' => $this->input->post('intrusion_fileName'),
				'intrusiontype' => $this->input->post('intrusiontype'),
				'intrusiondetailscol' => $this->input->post('intrusiondetailscol'),
				'deleteflag' => $this->input->post('deleteflag'),
				'delete_flag' => $this->input->post('delete_flag'),
				'locationid' => $this->input->post('locationid'),
				'raspieid' => $this->input->post('raspieid'),
				'incidentstatus' => $this->input->post('incidentstatus'),
            );
            
            $intrusiondetail_id = $this->Intrusiondetail_model->add_intrusiondetail($params);
            redirect('intrusiondetail/index');
        }
        else
        {            
            $data['_view'] = 'intrusiondetail/add';
            $this->load->view('layouts/main',$data);
        }
    }  
	
	
	function restadd()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				#'school_id' => $this->input->post('school_id'),
				#'camera_id' => $this->input->post('camera_id'),
				'intrusion_imagepath' => $this->input->post('imagePath'),
				#'intrusion_status' => $this->input->post('intrusion_status'),
				#'intrusion_time' => $this->input->post('intrusion_time'),
				#'intrusion_resolvedTime' => $this->input->post('intrusion_resolvedTime'),
				#'createdBy' => $this->input->post('createdBy'),
				#'createdOn' => $this->input->post('createdOn'),
				#'modifiedBy' => $this->input->post('modifiedBy'),
				#'modifiedOn' => $this->input->post('modifiedOn'),
				'intrusion_fileName' => $this->input->post('imageName'),
				'intrusiontype' => $this->input->post('incendentType'),
				#'intrusiondetailscol' => $this->input->post('intrusiondetailscol'),
				#'deleteflag' => $this->input->post('deleteflag'),
				#'delete_flag' => $this->input->post('delete_flag'),
				'locationid' => $this->input->post('locationId'),
				#'raspieid' => $this->input->post('raspieid'),
				'incidentstatus' => $this->input->post('incendentType')
            );
            
            $intrusiondetail_id = $this->Intrusiondetail_model->add_intrusiondetail($params);
			return $intrusiondetail_id;
           # redirect('intrusiondetail/index');
        }
        else
        {            
             
        }
    }  

    /*
     * Editing a intrusiondetail
     */
    function edit($intrusion_id)
    {   
        // check if the intrusiondetail exists before trying to edit it
        $data['intrusiondetail'] = $this->Intrusiondetail_model->get_intrusiondetail($intrusion_id);
        
        if(isset($data['intrusiondetail']['intrusion_id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'school_id' => $this->input->post('school_id'),
					'camera_id' => $this->input->post('camera_id'),
					'intrusion_imagepath' => $this->input->post('intrusion_imagepath'),
					'intrusion_status' => $this->input->post('intrusion_status'),
					'intrusion_time' => $this->input->post('intrusion_time'),
					'intrusion_resolvedTime' => $this->input->post('intrusion_resolvedTime'),
					'createdBy' => $this->input->post('createdBy'),
					'createdOn' => $this->input->post('createdOn'),
					'modifiedBy' => $this->input->post('modifiedBy'),
					'modifiedOn' => $this->input->post('modifiedOn'),
					'intrusion_fileName' => $this->input->post('intrusion_fileName'),
					'intrusiontype' => $this->input->post('intrusiontype'),
					'intrusiondetailscol' => $this->input->post('intrusiondetailscol'),
					'deleteflag' => $this->input->post('deleteflag'),
					'delete_flag' => $this->input->post('delete_flag'),
					'locationid' => $this->input->post('locationid'),
					'raspieid' => $this->input->post('raspieid'),
					'incidentstatus' => $this->input->post('incidentstatus'),
                );

                $this->Intrusiondetail_model->update_intrusiondetail($intrusion_id,$params);            
                redirect('intrusiondetail/index');
            }
            else
            {
                $data['_view'] = 'intrusiondetail/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The intrusiondetail you are trying to edit does not exist.');
    } 
	
	
	/*
     * Editing a intrusiondetail
     */
    function insertOrUpdateIntrusionDetails($intrusion_id)
    {   
        // check if the intrusiondetail exists before trying to edit it
        $data['intrusiondetail'] = $this->Intrusiondetail_model->get_intrusiondetail($intrusion_id);
        
        if(isset($data['intrusiondetail']['intrusion_id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'incidentstatus' => $this->input->post('incidentstatus')
                );

                $this->Intrusiondetail_model->update_intrusiondetail($intrusion_id,$params);            
                redirect('intrusiondetail/index');
            }
            else
            {
                $data['_view'] = 'intrusiondetail/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The intrusiondetail you are trying to edit does not exist.');
    } 
    /*
     * Deleting intrusiondetail
     */
    function remove1($intrusion_id)
    {
        $intrusiondetail = $this->Intrusiondetail_model->get_intrusiondetail($intrusion_id);

        // check if the intrusiondetail exists before trying to delete it
        if(isset($intrusiondetail['intrusion_id']))
        {
            $this->Intrusiondetail_model->delete_intrusiondetail($intrusion_id);
            redirect('intrusiondetail/index');
        }
        else
            show_error('The intrusiondetail you are trying to delete does not exist.');
    }
    
	/*
	**
	**
	*/
	
  public function insertOrUpdateIntrusionDetails1($files, $intrusionDetails) {
    /*JSONObject jsonObject = new JSONObject(intrusionDetails);
    ObjectMapper mapper = new ObjectMapper();
    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    IntrusionDetails itr = (IntrusionDetails)mapper.readValue(jsonObject.toString(), IntrusionDetails.class);
    System.out.println(itr);
    if (jsonObject.has("cameraId")) {
      CameraMaster cameraMaster = this.cameraMasterDaoImpl.getCamerasByIdObject(jsonObject.getString("cameraId"));
      itr.setCameraMaster(cameraMaster);
    } 
    if (jsonObject.has("schoolId")) {
      SchoolMaster schoolMaster = this.schoolMasterimpl.getByIdSchoolsList(jsonObject.getString("schoolId"));
      itr.setSchoolMaster(schoolMaster);
    } 
    if (files != null && 
      !files.isEmpty())
      try {
        byte[] bytes = files.getBytes();
        Properties prop = new Properties();
        InputStream inStream = Thread.currentThread().getContextClassLoader()
          .getResourceAsStream("/resources/config.properties");
        prop.load(inStream);
        System.out.println(prop.getProperty("constantsPath"));
        Path path = Paths.get(String.valueOf(prop.getProperty("constantsPath")) + files.getOriginalFilename(), new String[0]);
        Files.write(path, bytes, new java.nio.file.OpenOption[0]);
        itr.setIntrusionImagepath(String.valueOf(prop.getProperty("constantsPath")) + files.getOriginalFilename());
        itr.setIntrusionFileName(files.getOriginalFilename());
        System.out.println(intrusionDetails);
      } catch (IOException e) {
        e.printStackTrace();
      }  
    this.intrusionDetailsDaoImpl.insertOrUpdateIntrusionDetails(itr);
    return itr.getIntrusionId();*/
  }
  
  //Get Details of one incident 
  
  function getdetails()
    {   
	
		if(isset($_POST) && count($_POST) > 0)     
            { 
				$intrusion_id = $_POST["intrusionid"];
			}else if (isset($_GET) && count($_GET) > 0){
				$intrusion_id = $_GET["intrusionid"];
			}else {
				$intrusion_id = 1;
			}			
			
        // check if the intrusiondetail exists before trying to edit it
        $data['intrusiondetail'] = $this->Intrusiondetail_model->get_intrusiondetail($intrusion_id);
        #print_r($data);
        if(isset($data['intrusiondetail']['intrusion_id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                #$this->Intrusiondetail_model->update_intrusiondetail($intrusion_id,$params);            
                $data['_view'] = 'intrusiondetail/getdetails';
                $this->load->view('layouts/none',$data);
            }
            else
            {
                $data['_view'] = 'intrusiondetail/getdetails';
                $this->load->view('layouts/none',$data);
            }
        }
        else
            show_error('The intrusiondetail you are trying to edit does not exist.');
    } 

}
