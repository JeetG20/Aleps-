<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Intrusiondetail extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Intrusiondetail_model');
		if($this->session->userdata('logged_in') !== TRUE){
			redirect('/usermaster/login');
		}
    } 

    /*
     * Listing of intrusiondetails
     */
    function index()
    {   
		$params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('intrusiondetail/index?');
        $config['total_rows'] = $this->Intrusiondetail_model->get_all_intrusiondetails_count();
        $this->pagination->initialize($config);

        
		$data['intrusiondetails'] = $this->Intrusiondetail_model->get_all_intrusiondetails($params);
        
        $data['_view'] = 'intrusiondetail/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new intrusiondetail
     */
    function add()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'school_id' => $this->input->post('school_id'),
				'camera_id' => $this->input->post('camera_id'),
				'intrusion_imagepath' => $this->input->post('intrusion_imagepath'),
				'intrusion_status' => $this->input->post('intrusion_status'),
				'intrusion_time' => $this->input->post('intrusion_time'),
				'intrusion_resolvedTime' => $this->input->post('intrusion_resolvedTime'),
				'createdBy' => $this->input->post('createdBy'),
				'createdOn' => $this->input->post('createdOn'),
				'modifiedBy' => $this->input->post('modifiedBy'),
				'modifiedOn' => $this->input->post('modifiedOn'),
				'intrusion_fileName' => $this->input->post('intrusion_fileName'),
				'intrusiontype' => $this->input->post('intrusiontype'),
				'intrusiondetailscol' => $this->input->post('intrusiondetailscol'),
				'deleteflag' => $this->input->post('deleteflag'),
				'delete_flag' => $this->input->post('delete_flag'),
				'locationid' => $this->input->post('locationid'),
				'raspieid' => $this->input->post('raspieid'),
				'incidentstatus' => $this->input->post('incidentstatus'),
            );
            
            $intrusiondetail_id = $this->Intrusiondetail_model->add_intrusiondetail($params);
            redirect('intrusiondetail/index');
        }
        else
        {            
            $data['_view'] = 'intrusiondetail/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a intrusiondetail
     */
    function edit($intrusion_id)
    {   
        // check if the intrusiondetail exists before trying to edit it
        $data['intrusiondetail'] = $this->Intrusiondetail_model->get_intrusiondetail($intrusion_id);
        
        if(isset($data['intrusiondetail']['intrusion_id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'school_id' => $this->input->post('school_id'),
					'camera_id' => $this->input->post('camera_id'),
					'intrusion_imagepath' => $this->input->post('intrusion_imagepath'),
					'intrusion_status' => $this->input->post('intrusion_status'),
					'intrusion_time' => $this->input->post('intrusion_time'),
					'intrusion_resolvedTime' => $this->input->post('intrusion_resolvedTime'),
					'createdBy' => $this->input->post('createdBy'),
					'createdOn' => $this->input->post('createdOn'),
					'modifiedBy' => $this->input->post('modifiedBy'),
					'modifiedOn' => $this->input->post('modifiedOn'),
					'intrusion_fileName' => $this->input->post('intrusion_fileName'),
					'intrusiontype' => $this->input->post('intrusiontype'),
					'intrusiondetailscol' => $this->input->post('intrusiondetailscol'),
					'deleteflag' => $this->input->post('deleteflag'),
					'delete_flag' => $this->input->post('delete_flag'),
					'locationid' => $this->input->post('locationid'),
					'raspieid' => $this->input->post('raspieid'),
					'incidentstatus' => $this->input->post('incidentstatus'),
                );

                $this->Intrusiondetail_model->update_intrusiondetail($intrusion_id,$params);            
                redirect('intrusiondetail/index');
            }
            else
            {
                $data['_view'] = 'intrusiondetail/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The intrusiondetail you are trying to edit does not exist.');
    } 

    /*
     * Deleting intrusiondetail
     */
    function remove($intrusion_id)
    {
        $intrusiondetail = $this->Intrusiondetail_model->get_intrusiondetail($intrusion_id);

        // check if the intrusiondetail exists before trying to delete it
        if(isset($intrusiondetail['intrusion_id']))
        {
            $this->Intrusiondetail_model->delete_intrusiondetail($intrusion_id);
            redirect('intrusiondetail/index');
        }
        else
            show_error('The intrusiondetail you are trying to delete does not exist.');
    }
    
	/*
	**
	**
	*/
	
  public function insertOrUpdateIntrusionDetails($files, $intrusionDetails) {
    /*JSONObject jsonObject = new JSONObject(intrusionDetails);
    ObjectMapper mapper = new ObjectMapper();
    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    IntrusionDetails itr = (IntrusionDetails)mapper.readValue(jsonObject.toString(), IntrusionDetails.class);
    System.out.println(itr);
    if (jsonObject.has("cameraId")) {
      CameraMaster cameraMaster = this.cameraMasterDaoImpl.getCamerasByIdObject(jsonObject.getString("cameraId"));
      itr.setCameraMaster(cameraMaster);
    } 
    if (jsonObject.has("schoolId")) {
      SchoolMaster schoolMaster = this.schoolMasterimpl.getByIdSchoolsList(jsonObject.getString("schoolId"));
      itr.setSchoolMaster(schoolMaster);
    } 
    if (files != null && 
      !files.isEmpty())
      try {
        byte[] bytes = files.getBytes();
        Properties prop = new Properties();
        InputStream inStream = Thread.currentThread().getContextClassLoader()
          .getResourceAsStream("/resources/config.properties");
        prop.load(inStream);
        System.out.println(prop.getProperty("constantsPath"));
        Path path = Paths.get(String.valueOf(prop.getProperty("constantsPath")) + files.getOriginalFilename(), new String[0]);
        Files.write(path, bytes, new java.nio.file.OpenOption[0]);
        itr.setIntrusionImagepath(String.valueOf(prop.getProperty("constantsPath")) + files.getOriginalFilename());
        itr.setIntrusionFileName(files.getOriginalFilename());
        System.out.println(intrusionDetails);
      } catch (IOException e) {
        e.printStackTrace();
      }  
    this.intrusionDetailsDaoImpl.insertOrUpdateIntrusionDetails(itr);
    return itr.getIntrusionId();*/
  }
}
